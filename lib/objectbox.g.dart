// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'infrastructure/dal/models/address_model.dart';
import 'infrastructure/dal/models/company_model.dart';
import 'infrastructure/dal/models/customer/customer_entity.dart';
import 'infrastructure/dal/models/group_model.dart';
import 'infrastructure/dal/models/invoice/invoice_entity.dart';
import 'infrastructure/dal/models/payment_model.dart';
import 'infrastructure/dal/models/product_model.dart';
import 'infrastructure/dal/models/settings_model.dart';
import 'infrastructure/dal/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5553777297561029723),
    name: 'CompanyModel',
    lastPropertyId: const obx_int.IdUid(2, 8976556086874536334),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2273665200829695225),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8976556086874536334),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 795009732494319986),
    name: 'PaymentModel',
    lastPropertyId: const obx_int.IdUid(9, 5979430551938993953),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 841186522133768188),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6829108643100214681),
        name: 'amount',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7502788521963339348),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7632364036903409339),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7451121507462948429),
        name: 'num',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7638145593177438914),
        name: 'ref',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 334461259684184163),
        name: 'fkBankLine',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6352003214509902678),
        name: 'invoiceId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5979430551938993953),
        name: 'refExt',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 8148134742299014046),
    name: 'SettingsModel',
    lastPropertyId: const obx_int.IdUid(4, 2491089201060912164),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7364367108648962334),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3431055645200760093),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5039349645235255731),
        name: 'strValue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2491089201060912164),
        name: 'listValue',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 6238583104007751851),
    name: 'AddressModel',
    lastPropertyId: const obx_int.IdUid(3, 2199537431642306990),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7929657292094325222),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4259949954671774192),
        name: 'town',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2199537431642306990),
        name: 'address',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 4471010002487280222),
    name: 'GroupModel',
    lastPropertyId: const obx_int.IdUid(8, 8639680347838489566),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8575899006715503290),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8631647177360588832),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9107240610197464013),
        name: 'value',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3819675742013702071),
        name: 'codeDepartement',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5852881123367873109),
        name: 'code',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2369897025020459733),
        name: 'label',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2943142043111808165),
        name: 'active',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8639680347838489566),
        name: 'groupId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 5114182667635170921),
    name: 'ProductModel',
    lastPropertyId: const obx_int.IdUid(16, 4721954052784052598),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8099943608186458954),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 903177836122889109),
        name: 'ref',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2633763506664221112),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3375438032260941481),
        name: 'dateModification',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4874591298445076659),
        name: 'specimen',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8903656489712096536),
        name: 'label',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6201530302626657515),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5183995746761804415),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8218662075009211811),
        name: 'price',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7413833321997745968),
        name: 'priceTtc',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 4379075130530161751),
        name: 'pmp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8970984290757971142),
        name: 'statusBuy',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3859687591127138714),
        name: 'finished',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4453816026659089290),
        name: 'barcode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5372551758306560048),
        name: 'fkDefaultWarehouse',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 4721954052784052598),
        name: 'fkPriceExpression',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 7940692969592053576),
    name: 'UserModel',
    lastPropertyId: const obx_int.IdUid(39, 6301350198752051002),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2668819728510553833),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4837525722859689441),
        name: 'lastname',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6330798906112466392),
        name: 'firstname',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 8173667299967199771),
        name: 'admin',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 8293052631045741269),
        name: 'login',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(14, 8565645994927420519),
    name: 'InvoiceEntity',
    lastPropertyId: const obx_int.IdUid(22, 3835271128774568550),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2002881233304699217),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6455592219187657780),
        name: 'ref',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2230978222855695880),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7558238865171805958),
        name: 'paye',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3188391474747774564),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7265693578946392947),
        name: 'totalHt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2442301624423066184),
        name: 'totalTtc',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2733655836997729438),
        name: 'socid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 552620793765690583),
        name: 'date',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 4158803812692369021),
        name: 'dateLimReglement',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6237383301086210507),
        name: 'dateModification',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6771186506689456138),
        name: 'condReglementCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 914522867424154452),
        name: 'modeReglementCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 2120245256587100414),
        name: 'totalpaid',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1585366215882479919),
        name: 'sumcreditnote',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3282187772759773607),
        name: 'remaintopay',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 5114192393924490314),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 6421148568612031690),
        name: 'refCustomer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 8183258014020174784),
        name: 'fkFactureSource',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 2515328666575094448),
        name: 'documentId',
        type: 9,
        flags: 32808,
        indexId: const obx_int.IdUid(7, 5387446859372722123),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 3835271128774568550),
        name: 'fkSociete',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'lines',
        srcEntity: 'InvoiceLineEntity',
        srcField: 'invoice',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(15, 9217620003955697576),
    name: 'InvoiceLineEntity',
    lastPropertyId: const obx_int.IdUid(16, 1318663448915354515),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4695750721283495947),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 497376747588170874),
        name: 'invoiceId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 6008749438536397602),
        relationTarget: 'InvoiceEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5064889919418688280),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7473260421979167350),
        name: 'productLabel',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4530608617000474341),
        name: 'qty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4670477684956098450),
        name: 'subprice',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 557049175267471478),
        name: 'totalHt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2605165338771081890),
        name: 'totalTtc',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3359437718496713348),
        name: 'paHt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5843468334005680896),
        name: 'fkFacture',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8861832759102298515),
        name: 'fkProductType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 948030004260758704),
        name: 'fkProduct',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 7609107472561461989),
        name: 'productType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6056649261672950564),
        name: 'desc',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1318663448915354515),
        name: 'lineId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(16, 1585370382341591045),
    name: 'CustomerEntity',
    lastPropertyId: const obx_int.IdUid(12, 3909527054941473239),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4059593943891095083),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7483476014230502151),
        name: 'customerId',
        type: 9,
        flags: 32808,
        indexId: const obx_int.IdUid(3, 7952286931337481646),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 83646155851083685),
        name: 'stateId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 400596692618399717),
        name: 'regionId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1276486657715309546),
        name: 'name',
        type: 9,
        flags: 8,
        indexId: const obx_int.IdUid(4, 7781323275649887606),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7477340567608598120),
        name: 'dateModification',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1734016982415853887),
        name: 'phone',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5457034585363306795),
        name: 'fax',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8292467806304991181),
        name: 'codeClient',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7498513322307619058),
        name: 'address',
        type: 9,
        flags: 8,
        indexId: const obx_int.IdUid(5, 1987067518328218557),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8287623656473267353),
        name: 'town',
        type: 9,
        flags: 8,
        indexId: const obx_int.IdUid(6, 1736384653762180346),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3909527054941473239),
        name: 'client',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(16, 1585370382341591045),
    lastIndexId: const obx_int.IdUid(7, 5387446859372722123),
    lastRelationId: const obx_int.IdUid(1, 2203630809141307167),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      7035772561876029278,
      4708561009479625404,
      7506602661630033462,
      1047855051268304654,
      1152993770696795674,
      614788012598475160,
    ],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      3784442124619599166,
      4921641061413702404,
      658700151992031107,
      4098051206273534367,
      6427667826880757889,
      1760653574186578812,
      5572067347365469396,
      1398653228704993752,
      6294769430510700734,
      1764748721284118806,
      5234536736800583304,
      449986255601298177,
      4961145299351594615,
      2563876792089368976,
      4296857268183154579,
      3366597095486943617,
      5484911132263190836,
      2564399308718576173,
      2549701965619942593,
      2661451926683234249,
      3669695525571282992,
      7918631069683181567,
      8891653259720577861,
      3620445536089448171,
      3161408444711149045,
      7447993280578941227,
      3970539233075731104,
      4031174084670104104,
      8589471789904284539,
      9122052317913027341,
      8426574662560477061,
      7639173760007472497,
      2853396310471730682,
      6301350198752051002,
      3423392801598873082,
      1712429343504252772,
      4944362427518079932,
      8582056228675644463,
      7000634835414394037,
      4022833007442900495,
      3309095346200856842,
      1844485813211163017,
      8972950959357134540,
      5014118832339687843,
      7390497389090397602,
      8106184352225735325,
      5110971245059381648,
      6686892087459004765,
      5574258391366211135,
      3030287053355364617,
      7526382950695455645,
      4947583663222087241,
      3931943810092192120,
      426142402895327776,
      6018506044732127072,
      7283344191849802801,
      1653328132973591564,
      1540192957789370754,
      3291960185480128083,
      7512076760611506099,
      855930761689431046,
      7565141348661968236,
      8646494014871139828,
      7724727979403048193,
      7962623225158824233,
      1762294184694338035,
      2408826454631494600,
      3145888974964339881,
      1196649138703961937,
      9151135619886825420,
      7140974338307139527,
      6162161734049957163,
      8919789550715071092,
      3769429948544737507,
      964447342170141462,
      3739640197467553969,
      2564441916897818415,
      1400700386652988649,
      6572819461370531791,
      9003660938201782778,
      2448934070652893678,
      4824488146533405247,
      8944342237975800426,
      7454562022354330417,
      6516384478188896319,
      352390207133921052,
      8851868720249278871,
      8539178230228959743,
      2160184051971307307,
      4761147045815675763,
      1418728998321330625,
      1472059517356071538,
      5718058952177890759,
      2441547124820527803,
      3341616390487729540,
      287914181671829603,
      4821522098651301925,
      4037429295427834960,
      4883532370085148344,
      6180638268668711335,
      7597009717382775306,
      907974348744688773,
      1036453673198945497,
      1398933963658960377,
      7952592336470300041,
      5383910459304619134,
      561277465888448093,
      8805455143812311288,
      1638259202052788460,
      2291078359966547711,
      4571928558590667727,
      6633497636138033167,
      4107577210461247788,
      7488938851536139673,
      5270589598257471389,
      5662138426105972736,
      5907923045732052079,
      4820383965723662081,
      4743694070763816616,
      3418059198930782329,
      7157011307986885490,
      6524908293286088806,
      2433490109523904709,
      373320816554066459,
      6512777550838689765,
      6553099554545337467,
      7795921833107426051,
      583887530709852858,
      6156847478202508040,
      5586131628999490037,
      8484092291655211084,
      4424788748345723350,
      70815037698535261,
      49902928645108039,
      5767828731896921225,
      8911192972228490731,
      3842203204920809721,
      9051106585209329331,
      875617768726642714,
      8503575549808578071,
      6192449429198562896,
      3472637690864301274,
      4408614402270694639,
      201161321929978282,
      6143090855607425151,
      3166729488987281341,
      493736743742609482,
      8595271273938891988,
      553461537297367241,
      477708759165425129,
      643232132476123657,
      3417696304632501406,
      4748240913714829606,
      5884685040688136253,
      5294306662438124398,
      1980513449840819564,
      2521693235282269478,
      6187056506075921318,
      5963899102541475626,
      1637281920928280319,
      4994420475414675208,
      1075674644256169258,
      8223509804929768633,
      6270160878365655363,
      5721608889190497821,
      3585459093821214211,
      5263054372087387473,
    ],
    retiredRelationUids: const [2203630809141307167],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CompanyModel: obx_int.EntityDefinition<CompanyModel>(
      model: _entities[0],
      toOneRelations: (CompanyModel object) => [],
      toManyRelations: (CompanyModel object) => {},
      getId: (CompanyModel object) => object.id,
      setId: (CompanyModel object, int id) {
        object.id = id;
      },
      objectToFB: (CompanyModel object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        fbb.startTable(3);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final object = CompanyModel(id: idParam, name: nameParam);

        return object;
      },
    ),
    PaymentModel: obx_int.EntityDefinition<PaymentModel>(
      model: _entities[1],
      toOneRelations: (PaymentModel object) => [],
      toManyRelations: (PaymentModel object) => {},
      getId: (PaymentModel object) => object.id,
      setId: (PaymentModel object, int id) {
        object.id = id;
      },
      objectToFB: (PaymentModel object, fb.Builder fbb) {
        final amountOffset = fbb.writeString(object.amount);
        final typeOffset = fbb.writeString(object.type);
        final numOffset = object.num == null
            ? null
            : fbb.writeString(object.num!);
        final refOffset = object.ref == null
            ? null
            : fbb.writeString(object.ref!);
        final fkBankLineOffset = object.fkBankLine == null
            ? null
            : fbb.writeString(object.fkBankLine!);
        final invoiceIdOffset = object.invoiceId == null
            ? null
            : fbb.writeString(object.invoiceId!);
        final refExtOffset = object.refExt == null
            ? null
            : fbb.writeString(object.refExt!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, amountOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addInt64(3, object.date.millisecondsSinceEpoch);
        fbb.addOffset(4, numOffset);
        fbb.addOffset(5, refOffset);
        fbb.addOffset(6, fkBankLineOffset);
        fbb.addOffset(7, invoiceIdOffset);
        fbb.addOffset(8, refExtOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final amountParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final numParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final refParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final refExtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final fkBankLineParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final invoiceIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final object = PaymentModel(
          id: idParam,
          amount: amountParam,
          type: typeParam,
          date: dateParam,
          num: numParam,
          ref: refParam,
          refExt: refExtParam,
          fkBankLine: fkBankLineParam,
          invoiceId: invoiceIdParam,
        );

        return object;
      },
    ),
    SettingsModel: obx_int.EntityDefinition<SettingsModel>(
      model: _entities[2],
      toOneRelations: (SettingsModel object) => [],
      toManyRelations: (SettingsModel object) => {},
      getId: (SettingsModel object) => object.id,
      setId: (SettingsModel object, int id) {
        object.id = id;
      },
      objectToFB: (SettingsModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final strValueOffset = object.strValue == null
            ? null
            : fbb.writeString(object.strValue!);
        final listValueOffset = object.listValue == null
            ? null
            : fbb.writeList(
                object.listValue!.map(fbb.writeString).toList(growable: false),
              );
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, strValueOffset);
        fbb.addOffset(3, listValueOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final strValueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final listValueParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = SettingsModel(
          id: idParam,
          name: nameParam,
          strValue: strValueParam,
          listValue: listValueParam,
        );

        return object;
      },
    ),
    AddressModel: obx_int.EntityDefinition<AddressModel>(
      model: _entities[3],
      toOneRelations: (AddressModel object) => [],
      toManyRelations: (AddressModel object) => {},
      getId: (AddressModel object) => object.id,
      setId: (AddressModel object, int id) {
        object.id = id;
      },
      objectToFB: (AddressModel object, fb.Builder fbb) {
        final townOffset = object.town == null
            ? null
            : fbb.writeString(object.town!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, townOffset);
        fbb.addOffset(2, addressOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final townParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = AddressModel(
          id: idParam,
          town: townParam,
          address: addressParam,
        );

        return object;
      },
    ),
    GroupModel: obx_int.EntityDefinition<GroupModel>(
      model: _entities[4],
      toOneRelations: (GroupModel object) => [],
      toManyRelations: (GroupModel object) => {},
      getId: (GroupModel object) => object.id,
      setId: (GroupModel object, int id) {
        object.id = id;
      },
      objectToFB: (GroupModel object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final valueOffset = object.value == null
            ? null
            : fbb.writeString(object.value!);
        final codeOffset = object.code == null
            ? null
            : fbb.writeString(object.code!);
        final labelOffset = object.label == null
            ? null
            : fbb.writeString(object.label!);
        final activeOffset = object.active == null
            ? null
            : fbb.writeString(object.active!);
        final groupIdOffset = object.groupId == null
            ? null
            : fbb.writeString(object.groupId!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, valueOffset);
        fbb.addInt64(3, object.codeDepartement);
        fbb.addOffset(4, codeOffset);
        fbb.addOffset(5, labelOffset);
        fbb.addOffset(6, activeOffset);
        fbb.addOffset(7, groupIdOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final groupIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final valueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final codeDepartementParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final codeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final labelParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final activeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object = GroupModel(
          groupId: groupIdParam,
          name: nameParam,
          value: valueParam,
          codeDepartement: codeDepartementParam,
          code: codeParam,
          label: labelParam,
          active: activeParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    ProductModel: obx_int.EntityDefinition<ProductModel>(
      model: _entities[5],
      toOneRelations: (ProductModel object) => [],
      toManyRelations: (ProductModel object) => {},
      getId: (ProductModel object) => object.id,
      setId: (ProductModel object, int id) {
        object.id = id;
      },
      objectToFB: (ProductModel object, fb.Builder fbb) {
        final refOffset = object.ref == null
            ? null
            : fbb.writeString(object.ref!);
        final statusOffset = object.status == null
            ? null
            : fbb.writeString(object.status!);
        final labelOffset = object.label == null
            ? null
            : fbb.writeString(object.label!);
        final descriptionOffset = object.description == null
            ? null
            : fbb.writeString(object.description!);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        final priceOffset = object.price == null
            ? null
            : fbb.writeString(object.price!);
        final priceTtcOffset = object.priceTtc == null
            ? null
            : fbb.writeString(object.priceTtc!);
        final pmpOffset = object.pmp == null
            ? null
            : fbb.writeString(object.pmp!);
        final statusBuyOffset = object.statusBuy == null
            ? null
            : fbb.writeString(object.statusBuy!);
        final finishedOffset = object.finished == null
            ? null
            : fbb.writeString(object.finished!);
        final barcodeOffset = object.barcode == null
            ? null
            : fbb.writeString(object.barcode!);
        final fkDefaultWarehouseOffset = object.fkDefaultWarehouse == null
            ? null
            : fbb.writeString(object.fkDefaultWarehouse!);
        final fkPriceExpressionOffset = object.fkPriceExpression == null
            ? null
            : fbb.writeString(object.fkPriceExpression!);
        fbb.startTable(17);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, refOffset);
        fbb.addOffset(2, statusOffset);
        fbb.addInt64(3, object.dateModification);
        fbb.addInt64(4, object.specimen);
        fbb.addOffset(5, labelOffset);
        fbb.addOffset(6, descriptionOffset);
        fbb.addOffset(7, typeOffset);
        fbb.addOffset(8, priceOffset);
        fbb.addOffset(9, priceTtcOffset);
        fbb.addOffset(10, pmpOffset);
        fbb.addOffset(11, statusBuyOffset);
        fbb.addOffset(12, finishedOffset);
        fbb.addOffset(13, barcodeOffset);
        fbb.addOffset(14, fkDefaultWarehouseOffset);
        fbb.addOffset(15, fkPriceExpressionOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final refParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final dateModificationParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final specimenParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final labelParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final priceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final priceTtcParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final pmpParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final statusBuyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final finishedParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final barcodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final fkDefaultWarehouseParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final fkPriceExpressionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final object = ProductModel(
          id: idParam,
          ref: refParam,
          status: statusParam,
          dateModification: dateModificationParam,
          specimen: specimenParam,
          label: labelParam,
          description: descriptionParam,
          type: typeParam,
          price: priceParam,
          priceTtc: priceTtcParam,
          pmp: pmpParam,
          statusBuy: statusBuyParam,
          finished: finishedParam,
          barcode: barcodeParam,
          fkDefaultWarehouse: fkDefaultWarehouseParam,
          fkPriceExpression: fkPriceExpressionParam,
        );

        return object;
      },
    ),
    UserModel: obx_int.EntityDefinition<UserModel>(
      model: _entities[6],
      toOneRelations: (UserModel object) => [],
      toManyRelations: (UserModel object) => {},
      getId: (UserModel object) => object.id,
      setId: (UserModel object, int id) {
        object.id = id;
      },
      objectToFB: (UserModel object, fb.Builder fbb) {
        final lastnameOffset = object.lastname == null
            ? null
            : fbb.writeString(object.lastname!);
        final firstnameOffset = object.firstname == null
            ? null
            : fbb.writeString(object.firstname!);
        final adminOffset = object.admin == null
            ? null
            : fbb.writeString(object.admin!);
        final loginOffset = object.login == null
            ? null
            : fbb.writeString(object.login!);
        fbb.startTable(40);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(8, lastnameOffset);
        fbb.addOffset(9, firstnameOffset);
        fbb.addOffset(20, adminOffset);
        fbb.addOffset(21, loginOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final lastnameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final firstnameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final adminParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final loginParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 46);
        final object = UserModel(
          id: idParam,
          lastname: lastnameParam,
          firstname: firstnameParam,
          admin: adminParam,
          login: loginParam,
        );

        return object;
      },
    ),
    InvoiceEntity: obx_int.EntityDefinition<InvoiceEntity>(
      model: _entities[7],
      toOneRelations: (InvoiceEntity object) => [],
      toManyRelations: (InvoiceEntity object) => {
        obx_int.RelInfo<InvoiceLineEntity>.toOneBacklink(
          2,
          object.id,
          (InvoiceLineEntity srcObject) => srcObject.invoice,
        ): object.lines,
      },
      getId: (InvoiceEntity object) => object.id,
      setId: (InvoiceEntity object, int id) {
        object.id = id;
      },
      objectToFB: (InvoiceEntity object, fb.Builder fbb) {
        final refOffset = object.ref == null
            ? null
            : fbb.writeString(object.ref!);
        final statusOffset = object.status == null
            ? null
            : fbb.writeString(object.status!);
        final payeOffset = object.paye == null
            ? null
            : fbb.writeString(object.paye!);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        final totalHtOffset = object.totalHt == null
            ? null
            : fbb.writeString(object.totalHt!);
        final totalTtcOffset = object.totalTtc == null
            ? null
            : fbb.writeString(object.totalTtc!);
        final socidOffset = object.socid == null
            ? null
            : fbb.writeString(object.socid!);
        final condReglementCodeOffset = object.condReglementCode == null
            ? null
            : fbb.writeString(object.condReglementCode!);
        final modeReglementCodeOffset = object.modeReglementCode == null
            ? null
            : fbb.writeString(object.modeReglementCode!);
        final sumcreditnoteOffset = object.sumcreditnote == null
            ? null
            : fbb.writeString(object.sumcreditnote!);
        final remaintopayOffset = object.remaintopay == null
            ? null
            : fbb.writeString(object.remaintopay!);
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final refCustomerOffset = object.refCustomer == null
            ? null
            : fbb.writeString(object.refCustomer!);
        final fkFactureSourceOffset = object.fkFactureSource == null
            ? null
            : fbb.writeString(object.fkFactureSource!);
        final documentIdOffset = object.documentId == null
            ? null
            : fbb.writeString(object.documentId!);
        fbb.startTable(23);
        fbb.addInt64(0, object.id);
        fbb.addOffset(2, refOffset);
        fbb.addOffset(3, statusOffset);
        fbb.addOffset(4, payeOffset);
        fbb.addOffset(5, typeOffset);
        fbb.addOffset(6, totalHtOffset);
        fbb.addOffset(7, totalTtcOffset);
        fbb.addOffset(8, socidOffset);
        fbb.addInt64(9, object.date);
        fbb.addInt64(10, object.dateLimReglement);
        fbb.addInt64(11, object.dateModification);
        fbb.addOffset(12, condReglementCodeOffset);
        fbb.addOffset(13, modeReglementCodeOffset);
        fbb.addInt64(14, object.totalpaid);
        fbb.addOffset(15, sumcreditnoteOffset);
        fbb.addOffset(16, remaintopayOffset);
        fbb.addOffset(17, nameOffset);
        fbb.addOffset(18, refCustomerOffset);
        fbb.addOffset(19, fkFactureSourceOffset);
        fbb.addOffset(20, documentIdOffset);
        fbb.addInt64(21, object.fkSociete);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final documentIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final refParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final payeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final totalHtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final totalTtcParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final socidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final fkSocieteParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          46,
        );
        final dateParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final dateLimReglementParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final dateModificationParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          26,
        );
        final condReglementCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final modeReglementCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final totalpaidParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final sumcreditnoteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final remaintopayParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final refCustomerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final fkFactureSourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 42);
        final object = InvoiceEntity(
          documentId: documentIdParam,
          ref: refParam,
          status: statusParam,
          paye: payeParam,
          type: typeParam,
          totalHt: totalHtParam,
          totalTtc: totalTtcParam,
          socid: socidParam,
          fkSociete: fkSocieteParam,
          date: dateParam,
          dateLimReglement: dateLimReglementParam,
          dateModification: dateModificationParam,
          condReglementCode: condReglementCodeParam,
          modeReglementCode: modeReglementCodeParam,
          totalpaid: totalpaidParam,
          sumcreditnote: sumcreditnoteParam,
          remaintopay: remaintopayParam,
          name: nameParam,
          refCustomer: refCustomerParam,
          fkFactureSource: fkFactureSourceParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<InvoiceEntity>(
          object.lines,
          store,
          obx_int.RelInfo<InvoiceLineEntity>.toOneBacklink(
            2,
            object.id,
            (InvoiceLineEntity srcObject) => srcObject.invoice,
          ),
        );
        return object;
      },
    ),
    InvoiceLineEntity: obx_int.EntityDefinition<InvoiceLineEntity>(
      model: _entities[8],
      toOneRelations: (InvoiceLineEntity object) => [object.invoice],
      toManyRelations: (InvoiceLineEntity object) => {},
      getId: (InvoiceLineEntity object) => object.id,
      setId: (InvoiceLineEntity object, int id) {
        object.id = id;
      },
      objectToFB: (InvoiceLineEntity object, fb.Builder fbb) {
        final descriptionOffset = object.description == null
            ? null
            : fbb.writeString(object.description!);
        final productLabelOffset = object.productLabel == null
            ? null
            : fbb.writeString(object.productLabel!);
        final qtyOffset = object.qty == null
            ? null
            : fbb.writeString(object.qty!);
        final subpriceOffset = object.subprice == null
            ? null
            : fbb.writeString(object.subprice!);
        final totalHtOffset = object.totalHt == null
            ? null
            : fbb.writeString(object.totalHt!);
        final totalTtcOffset = object.totalTtc == null
            ? null
            : fbb.writeString(object.totalTtc!);
        final paHtOffset = object.paHt == null
            ? null
            : fbb.writeString(object.paHt!);
        final fkFactureOffset = object.fkFacture == null
            ? null
            : fbb.writeString(object.fkFacture!);
        final fkProductTypeOffset = object.fkProductType == null
            ? null
            : fbb.writeString(object.fkProductType!);
        final fkProductOffset = object.fkProduct == null
            ? null
            : fbb.writeString(object.fkProduct!);
        final productTypeOffset = object.productType == null
            ? null
            : fbb.writeString(object.productType!);
        final descOffset = object.desc == null
            ? null
            : fbb.writeString(object.desc!);
        final lineIdOffset = object.lineId == null
            ? null
            : fbb.writeString(object.lineId!);
        fbb.startTable(17);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.invoice.targetId);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, productLabelOffset);
        fbb.addOffset(5, qtyOffset);
        fbb.addOffset(6, subpriceOffset);
        fbb.addOffset(7, totalHtOffset);
        fbb.addOffset(8, totalTtcOffset);
        fbb.addOffset(9, paHtOffset);
        fbb.addOffset(10, fkFactureOffset);
        fbb.addOffset(11, fkProductTypeOffset);
        fbb.addOffset(12, fkProductOffset);
        fbb.addOffset(13, productTypeOffset);
        fbb.addOffset(14, descOffset);
        fbb.addOffset(15, lineIdOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lineIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final productLabelParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final qtyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final subpriceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final totalHtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final totalTtcParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final paHtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final fkFactureParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final fkProductTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final fkProductParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final productTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final descParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final object = InvoiceLineEntity(
          lineId: lineIdParam,
          description: descriptionParam,
          productLabel: productLabelParam,
          qty: qtyParam,
          subprice: subpriceParam,
          totalHt: totalHtParam,
          totalTtc: totalTtcParam,
          paHt: paHtParam,
          fkFacture: fkFactureParam,
          fkProductType: fkProductTypeParam,
          fkProduct: fkProductParam,
          productType: productTypeParam,
          desc: descParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.invoice.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.invoice.attach(store);
        return object;
      },
    ),
    CustomerEntity: obx_int.EntityDefinition<CustomerEntity>(
      model: _entities[9],
      toOneRelations: (CustomerEntity object) => [],
      toManyRelations: (CustomerEntity object) => {},
      getId: (CustomerEntity object) => object.id,
      setId: (CustomerEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CustomerEntity object, fb.Builder fbb) {
        final customerIdOffset = object.customerId == null
            ? null
            : fbb.writeString(object.customerId!);
        final stateIdOffset = object.stateId == null
            ? null
            : fbb.writeString(object.stateId!);
        final regionIdOffset = object.regionId == null
            ? null
            : fbb.writeString(object.regionId!);
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final phoneOffset = object.phone == null
            ? null
            : fbb.writeString(object.phone!);
        final faxOffset = object.fax == null
            ? null
            : fbb.writeString(object.fax!);
        final codeClientOffset = object.codeClient == null
            ? null
            : fbb.writeString(object.codeClient!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final townOffset = object.town == null
            ? null
            : fbb.writeString(object.town!);
        final clientOffset = object.client == null
            ? null
            : fbb.writeString(object.client!);
        fbb.startTable(13);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, customerIdOffset);
        fbb.addOffset(2, stateIdOffset);
        fbb.addOffset(3, regionIdOffset);
        fbb.addOffset(4, nameOffset);
        fbb.addInt64(5, object.dateModification);
        fbb.addOffset(6, phoneOffset);
        fbb.addOffset(7, faxOffset);
        fbb.addOffset(8, codeClientOffset);
        fbb.addOffset(9, addressOffset);
        fbb.addOffset(10, townOffset);
        fbb.addOffset(11, clientOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final customerIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final stateIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final regionIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final dateModificationParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final phoneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final faxParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final codeClientParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final townParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final clientParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final object = CustomerEntity(
          id: idParam,
          customerId: customerIdParam,
          stateId: stateIdParam,
          regionId: regionIdParam,
          name: nameParam,
          dateModification: dateModificationParam,
          phone: phoneParam,
          fax: faxParam,
          codeClient: codeClientParam,
          address: addressParam,
          town: townParam,
          client: clientParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CompanyModel] entity fields to define ObjectBox queries.
class CompanyModel_ {
  /// See [CompanyModel.id].
  static final id = obx.QueryIntegerProperty<CompanyModel>(
    _entities[0].properties[0],
  );

  /// See [CompanyModel.name].
  static final name = obx.QueryStringProperty<CompanyModel>(
    _entities[0].properties[1],
  );
}

/// [PaymentModel] entity fields to define ObjectBox queries.
class PaymentModel_ {
  /// See [PaymentModel.id].
  static final id = obx.QueryIntegerProperty<PaymentModel>(
    _entities[1].properties[0],
  );

  /// See [PaymentModel.amount].
  static final amount = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[1],
  );

  /// See [PaymentModel.type].
  static final type = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[2],
  );

  /// See [PaymentModel.date].
  static final date = obx.QueryDateProperty<PaymentModel>(
    _entities[1].properties[3],
  );

  /// See [PaymentModel.num].
  static final num = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[4],
  );

  /// See [PaymentModel.ref].
  static final ref = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[5],
  );

  /// See [PaymentModel.fkBankLine].
  static final fkBankLine = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[6],
  );

  /// See [PaymentModel.invoiceId].
  static final invoiceId = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[7],
  );

  /// See [PaymentModel.refExt].
  static final refExt = obx.QueryStringProperty<PaymentModel>(
    _entities[1].properties[8],
  );
}

/// [SettingsModel] entity fields to define ObjectBox queries.
class SettingsModel_ {
  /// See [SettingsModel.id].
  static final id = obx.QueryIntegerProperty<SettingsModel>(
    _entities[2].properties[0],
  );

  /// See [SettingsModel.name].
  static final name = obx.QueryStringProperty<SettingsModel>(
    _entities[2].properties[1],
  );

  /// See [SettingsModel.strValue].
  static final strValue = obx.QueryStringProperty<SettingsModel>(
    _entities[2].properties[2],
  );

  /// See [SettingsModel.listValue].
  static final listValue = obx.QueryStringVectorProperty<SettingsModel>(
    _entities[2].properties[3],
  );
}

/// [AddressModel] entity fields to define ObjectBox queries.
class AddressModel_ {
  /// See [AddressModel.id].
  static final id = obx.QueryIntegerProperty<AddressModel>(
    _entities[3].properties[0],
  );

  /// See [AddressModel.town].
  static final town = obx.QueryStringProperty<AddressModel>(
    _entities[3].properties[1],
  );

  /// See [AddressModel.address].
  static final address = obx.QueryStringProperty<AddressModel>(
    _entities[3].properties[2],
  );
}

/// [GroupModel] entity fields to define ObjectBox queries.
class GroupModel_ {
  /// See [GroupModel.id].
  static final id = obx.QueryIntegerProperty<GroupModel>(
    _entities[4].properties[0],
  );

  /// See [GroupModel.name].
  static final name = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[1],
  );

  /// See [GroupModel.value].
  static final value = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[2],
  );

  /// See [GroupModel.codeDepartement].
  static final codeDepartement = obx.QueryIntegerProperty<GroupModel>(
    _entities[4].properties[3],
  );

  /// See [GroupModel.code].
  static final code = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[4],
  );

  /// See [GroupModel.label].
  static final label = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[5],
  );

  /// See [GroupModel.active].
  static final active = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[6],
  );

  /// See [GroupModel.groupId].
  static final groupId = obx.QueryStringProperty<GroupModel>(
    _entities[4].properties[7],
  );
}

/// [ProductModel] entity fields to define ObjectBox queries.
class ProductModel_ {
  /// See [ProductModel.id].
  static final id = obx.QueryIntegerProperty<ProductModel>(
    _entities[5].properties[0],
  );

  /// See [ProductModel.ref].
  static final ref = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[1],
  );

  /// See [ProductModel.status].
  static final status = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[2],
  );

  /// See [ProductModel.dateModification].
  static final dateModification = obx.QueryIntegerProperty<ProductModel>(
    _entities[5].properties[3],
  );

  /// See [ProductModel.specimen].
  static final specimen = obx.QueryIntegerProperty<ProductModel>(
    _entities[5].properties[4],
  );

  /// See [ProductModel.label].
  static final label = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[5],
  );

  /// See [ProductModel.description].
  static final description = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[6],
  );

  /// See [ProductModel.type].
  static final type = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[7],
  );

  /// See [ProductModel.price].
  static final price = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[8],
  );

  /// See [ProductModel.priceTtc].
  static final priceTtc = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[9],
  );

  /// See [ProductModel.pmp].
  static final pmp = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[10],
  );

  /// See [ProductModel.statusBuy].
  static final statusBuy = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[11],
  );

  /// See [ProductModel.finished].
  static final finished = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[12],
  );

  /// See [ProductModel.barcode].
  static final barcode = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[13],
  );

  /// See [ProductModel.fkDefaultWarehouse].
  static final fkDefaultWarehouse = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[14],
  );

  /// See [ProductModel.fkPriceExpression].
  static final fkPriceExpression = obx.QueryStringProperty<ProductModel>(
    _entities[5].properties[15],
  );
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id = obx.QueryIntegerProperty<UserModel>(
    _entities[6].properties[0],
  );

  /// See [UserModel.lastname].
  static final lastname = obx.QueryStringProperty<UserModel>(
    _entities[6].properties[1],
  );

  /// See [UserModel.firstname].
  static final firstname = obx.QueryStringProperty<UserModel>(
    _entities[6].properties[2],
  );

  /// See [UserModel.admin].
  static final admin = obx.QueryStringProperty<UserModel>(
    _entities[6].properties[3],
  );

  /// See [UserModel.login].
  static final login = obx.QueryStringProperty<UserModel>(
    _entities[6].properties[4],
  );
}

/// [InvoiceEntity] entity fields to define ObjectBox queries.
class InvoiceEntity_ {
  /// See [InvoiceEntity.id].
  static final id = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[0],
  );

  /// See [InvoiceEntity.ref].
  static final ref = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[1],
  );

  /// See [InvoiceEntity.status].
  static final status = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[2],
  );

  /// See [InvoiceEntity.paye].
  static final paye = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[3],
  );

  /// See [InvoiceEntity.type].
  static final type = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[4],
  );

  /// See [InvoiceEntity.totalHt].
  static final totalHt = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[5],
  );

  /// See [InvoiceEntity.totalTtc].
  static final totalTtc = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[6],
  );

  /// See [InvoiceEntity.socid].
  static final socid = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[7],
  );

  /// See [InvoiceEntity.date].
  static final date = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[8],
  );

  /// See [InvoiceEntity.dateLimReglement].
  static final dateLimReglement = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[9],
  );

  /// See [InvoiceEntity.dateModification].
  static final dateModification = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[10],
  );

  /// See [InvoiceEntity.condReglementCode].
  static final condReglementCode = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[11],
  );

  /// See [InvoiceEntity.modeReglementCode].
  static final modeReglementCode = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[12],
  );

  /// See [InvoiceEntity.totalpaid].
  static final totalpaid = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[13],
  );

  /// See [InvoiceEntity.sumcreditnote].
  static final sumcreditnote = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[14],
  );

  /// See [InvoiceEntity.remaintopay].
  static final remaintopay = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[15],
  );

  /// See [InvoiceEntity.name].
  static final name = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[16],
  );

  /// See [InvoiceEntity.refCustomer].
  static final refCustomer = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[17],
  );

  /// See [InvoiceEntity.fkFactureSource].
  static final fkFactureSource = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[18],
  );

  /// See [InvoiceEntity.documentId].
  static final documentId = obx.QueryStringProperty<InvoiceEntity>(
    _entities[7].properties[19],
  );

  /// See [InvoiceEntity.fkSociete].
  static final fkSociete = obx.QueryIntegerProperty<InvoiceEntity>(
    _entities[7].properties[20],
  );

  /// see [InvoiceEntity.lines]
  static final lines =
      obx.QueryBacklinkToMany<InvoiceLineEntity, InvoiceEntity>(
        InvoiceLineEntity_.invoice,
      );
}

/// [InvoiceLineEntity] entity fields to define ObjectBox queries.
class InvoiceLineEntity_ {
  /// See [InvoiceLineEntity.id].
  static final id = obx.QueryIntegerProperty<InvoiceLineEntity>(
    _entities[8].properties[0],
  );

  /// See [InvoiceLineEntity.invoice].
  static final invoice =
      obx.QueryRelationToOne<InvoiceLineEntity, InvoiceEntity>(
        _entities[8].properties[1],
      );

  /// See [InvoiceLineEntity.description].
  static final description = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[2],
  );

  /// See [InvoiceLineEntity.productLabel].
  static final productLabel = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[3],
  );

  /// See [InvoiceLineEntity.qty].
  static final qty = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[4],
  );

  /// See [InvoiceLineEntity.subprice].
  static final subprice = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[5],
  );

  /// See [InvoiceLineEntity.totalHt].
  static final totalHt = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[6],
  );

  /// See [InvoiceLineEntity.totalTtc].
  static final totalTtc = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[7],
  );

  /// See [InvoiceLineEntity.paHt].
  static final paHt = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[8],
  );

  /// See [InvoiceLineEntity.fkFacture].
  static final fkFacture = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[9],
  );

  /// See [InvoiceLineEntity.fkProductType].
  static final fkProductType = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[10],
  );

  /// See [InvoiceLineEntity.fkProduct].
  static final fkProduct = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[11],
  );

  /// See [InvoiceLineEntity.productType].
  static final productType = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[12],
  );

  /// See [InvoiceLineEntity.desc].
  static final desc = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[13],
  );

  /// See [InvoiceLineEntity.lineId].
  static final lineId = obx.QueryStringProperty<InvoiceLineEntity>(
    _entities[8].properties[14],
  );
}

/// [CustomerEntity] entity fields to define ObjectBox queries.
class CustomerEntity_ {
  /// See [CustomerEntity.id].
  static final id = obx.QueryIntegerProperty<CustomerEntity>(
    _entities[9].properties[0],
  );

  /// See [CustomerEntity.customerId].
  static final customerId = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[1],
  );

  /// See [CustomerEntity.stateId].
  static final stateId = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[2],
  );

  /// See [CustomerEntity.regionId].
  static final regionId = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[3],
  );

  /// See [CustomerEntity.name].
  static final name = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[4],
  );

  /// See [CustomerEntity.dateModification].
  static final dateModification = obx.QueryIntegerProperty<CustomerEntity>(
    _entities[9].properties[5],
  );

  /// See [CustomerEntity.phone].
  static final phone = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[6],
  );

  /// See [CustomerEntity.fax].
  static final fax = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[7],
  );

  /// See [CustomerEntity.codeClient].
  static final codeClient = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[8],
  );

  /// See [CustomerEntity.address].
  static final address = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[9],
  );

  /// See [CustomerEntity.town].
  static final town = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[10],
  );

  /// See [CustomerEntity.client].
  static final client = obx.QueryStringProperty<CustomerEntity>(
    _entities[9].properties[11],
  );
}
